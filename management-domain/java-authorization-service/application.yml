spring:
  # security:
  #   user:
  #     password: authorization-service-user
  #     name: '{cipher}AYAfdzcrkjwM4rt2jhkxezO5zBNmfljIeeBFXKsUMV8Q9ASYjBCv2lBtu2L7Se7hEK7DTDc1JxTmkiZW6dn14UhEdbpcSObqknAxiaK7wMBz3e6POdTZeIF1J/kCwBSvccEUGZuog1eZjQav14uE5wYQqyDfqnOPvak4JndzykJBjZ4SSzZNwOUYxQyRaA0gQbgYF+E+ZnY7BpwzfcT2DTpaZDPAYUBLFiCiY6bNbLBC3LS3i/Qq0/cv6OOz1Wl6ruwTQBrIHyrUiHOnbuj7MvBtl+VvaMyFaIFuxTDXZ7YxuxR4+l2Nd3eCqD2VDD63OrMlBWkcdBSJXOttIecqc+plciKAGdd4B8NIE/aD2oYChXKU/HDOyj6AoxJSSCjhGOBsa7T0j0w4ecqBwXNx8T9rp6fLpZxVWMZsJ53wcg2DfkbZSU2ZPeqYoCijK604HOVPDU8CcS1Rskj0wXrllvQRfXk0gt5PaVdlPCfKfMMX1fZKeglXtkYxMb5heyvpZsgy3Kl5VPXhjAcCatdKNrA/mMUwL8Bv2toFaBENp1nqIg=='
  #     roles: ACTUATOR

  boot:
    admin:
      client:
        instance:
          management-base-url: ${management.server.base.url}
          metadata:
            user:
              name: ${spring.security.user.name}
              password: ${spring.security.user.password}

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${authorization.mysql.host}:${authorization.mysql.port}/authorization
    username: ${authorization.mysql.username}
    password: ${authorization.mysql.password}

  session:
    store-type: redis
    redis:
      namespace: "authorization-service:sessions"
      flush-mode: on_save
      save-mode: on_set_attribute
    timeout: 30m

management:
  server:
    base:
      url: https://local.codzs.com:${management.server.port}
  jpa:
    generate-ddl: false
  data:
    redis:
      host: ${authorization.redis.host}
      port: ${authorization.redis.port}

hibernate:
  show_sql: false  # Security: Prevent SQL statement logging in production

acl:
  redis:
    cache:
      key: com.codzs.acl.cache.local

platform:
  type: AWS_EC2_INSTANCE

external:
  property: application-dev.yml inside java-demo-app

server:
  servlet:
    session:
      cookie:
        name: AUTHSESSIONID
        path: /
        secure: true
        http-only: true
        same-site: none
      timeout: 30m

# Device Authorization Security Configuration
device:
  security:
    rate-limiting:
      enabled: true
      requests-per-minute: 5
      time-window-minutes: 1
      # Note: Rate limiting protects against device code enumeration attacks
      # More restrictive in production than local environment

# Global Security Configuration
security:
  ip-blacklist:
    enabled: true
    block-response-delay-ms: 2000
    # Note: IP blacklisting prevents access from known malicious IPs
    # Longer delay in production for better security
  ip-whitelist:
    enabled: true
    block-response-delay-ms: 2000
    enforce-mode: true
    # Note: IP whitelisting restricts API access to approved IPs only
    # Set enabled to true to activate whitelist validation in production
    # enforce-mode: true blocks on validation errors for maximum security

# Resilience4j Configuration for Rate Limiting (Production Environment)
resilience4j:
  ratelimiter:
    instances:
      device-authorization:
        limit-for-period: 5
        limit-refresh-period: 60s
        timeout-duration: 200ms
        register-health-indicator: true
        event-consumer-buffer-size: 50
        # Note: More restrictive rate limiting in production
    metrics:
      enabled: true
      distribution-statistic-expiry: 2m
      distribution-statistic-buffer-size: 50